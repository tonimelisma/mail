Read @BACKLOG.md @ARCHITECTURE.md for context

Our intern tried to implement @SYNCVISION.md via @SYNCPLAN.md. You're a senior mobile developer and your job is to do a comprehensive code review of their work, from the UI layer all the way to Gmail/Graph API helpers. Read @SYNCLOG.md @CHANGELOG.md to understand their work.

I'm looking for you to produce a report outlining each requirement in SYNCVISION.md and whether it was implemented correctly or not, any tech debt, missing functionality or misalignments, as well as a list of issues and top-up work and course corrections you would do for each requirement. Use the numberings in SYNCVISION.md and traffic lights.

1. Explain all of the work the requirements encompass, and whether the intern implemented them throughout the stack.
1b. Explain which parts of the app the changes have touched: backend-google, backend-microsoft, calendar, core-data, core-db, data, domain, mail? All of them? UI?
2. Don't trust the markdown documents. Read the code as it is today on disk to understand its state and reason about it. Read all the files changed, as well as their dependencies to ensure they're still compatible with the dependencies.
3. For each requirement, explain in detail any bugs, missing features, dependencies etc. Explain the implementation step by step as you can see it in the code today.
4. Where are the soft spots in your analysis? Enumerate them to me.
5. Read the rest of the files on disk required to harden the soft spots. Ensure you know each and every API that will be affected by your changes and have read the actual files on disk and know them before moving to the next step.
6. Implement any required changes and top-up work.
7. Build and fix any build errors.
8. Update SYNCLOG.md with any relevant changes. Document the detailed work you did, deviations from plan, code smells, shortcuts etc in CHANGELOG.md
9. Check to make sure you didn't introduce any placeholders in the documents such as parts that say "this section is just like before".
10. Use your tools to do a git commit of everything changed. Ensure the comment is a one-liner. Then git push.

If you skip any step, you will be chastised. For instance, if you try to provide a plan before reading the code, a puppy dies.

In the beginning of your first message, repeat these numbered steps and then follow them to the letter.

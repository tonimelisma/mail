package net.melisma.data.mapper

import net.melisma.core_data.model.Attachment
import net.melisma.core_data.model.EntitySyncStatus
import net.melisma.core_db.entity.AttachmentEntity

fun AttachmentEntity.toDomainModel(): Attachment {
    return Attachment(
        id = this.id.toString(), // local DB ID of the attachment
        messageId = this.messageId, // local DB ID of the parent message
        accountId = this.accountId,
        fileName = this.fileName,
        contentType = this.mimeType,
        size = this.size,
        isInline = this.isInline,
        contentId = this.contentId,
        localUri = this.localFilePath,
        remoteId = this.remoteAttachmentId,
        downloadStatus = when (this.syncStatus) {
            EntitySyncStatus.SYNCED -> if (this.isDownloaded) "DOWNLOADED" else "NOT_DOWNLOADED"
            EntitySyncStatus.PENDING_DOWNLOAD -> "DOWNLOADING"
            EntitySyncStatus.ERROR -> "ERROR"
            else -> "NOT_DOWNLOADED" // Default for PENDING_UPLOAD, PENDING_DELETE
        },
        lastSyncError = this.lastSyncError
    )
}

fun Attachment.toEntity(messageDbId: String, accountId: String): AttachmentEntity {
    return AttachmentEntity(
        messageId = messageDbId,
        accountId = accountId,
        remoteAttachmentId = this.id, // The ID from the API is the remoteId
        fileName = this.fileName,
        mimeType = this.contentType,
        size = this.size,
        isInline = this.isInline,
        contentId = this.contentId,
        isDownloaded = this.localUri != null,
        localFilePath = this.localUri,
        downloadTimestamp = if (this.localUri != null) System.currentTimeMillis() else null,
        syncStatus = when (this.downloadStatus) {
            "DOWNLOADED" -> EntitySyncStatus.SYNCED
            "DOWNLOADING" -> EntitySyncStatus.PENDING_DOWNLOAD
            "ERROR" -> EntitySyncStatus.ERROR
            else -> EntitySyncStatus.SYNCED // Assume not downloaded but synced server-side
        },
        lastSyncError = this.lastSyncError
    )
}

fun Attachment.toEntity(): AttachmentEntity {
    return AttachmentEntity(
        // The domain model's 'id' is the remoteId, but the entity may have an auto-generated long id.
        // We rely on remoteAttachmentId for uniqueness from the server.
        id = this.localId ?: 0, // localId is the autogenerated PK from the DB
        messageId = this.messageId,
        accountId = this.accountId,
        remoteAttachmentId = this.remoteId,
        fileName = this.fileName,
        size = this.size,
        mimeType = this.contentType,
        contentId = this.contentId,
        isInline = this.isInline,
        isDownloaded = this.localUri != null,
        localFilePath = this.localUri
    )
} 